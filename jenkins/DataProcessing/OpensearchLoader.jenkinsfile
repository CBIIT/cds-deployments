@Library('datacommons-jenkins-shared-library') _

def getLabelForEnvironment(environment) {
	if (environment == "stage" || environment == "prod"){
		return "slave-ncias-s2979-c"
	}else {
		return "slave-ncias-d2943-c"
	}
}

pipeline {
	agent {
		node {
			label getLabelForEnvironment(params.Environment)
		}
	}
	parameters {
	extendedChoice(
        name: 'Environment',
        defaultValue: 'dev',
        description: 'Choose the environment to build',
        type: 'PT_SINGLE_SELECT',
        value: 'dev,dev2,qa,qa2,stage,prod' )

    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'LoaderTag', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')

    gitParameter(
        branch: "",
        branchFilter: "origin/(.*)",
        defaultValue: "main",
        description: "Filter Repo",
        name: "ModelTag",
        quickFilterEnabled: false,
        selectedValue: "NONE",
        sortMode: "NONE",
        tagFilter: "*",
        type: "PT_BRANCH_TAG",
        useRepository: "https://github.com/CBIIT/cds-model")

    gitParameter(branchFilter: 'origin/(.*)',
        defaultValue: "main",
        name: 'BackendTag',
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false,
        selectedValue: 'DEFAULT',
        sortMode: 'ASCENDING_SMART',
        tagFilter: '*',
        useRepository: "https://github.com/CBIIT/bento-cds-backend"
        )

    gitParameter(branchFilter: 'origin/(.*)',
        defaultValue: "main",
        name: 'FrontendTag',
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: false,
        selectedValue: 'DEFAULT',
        sortMode: 'ASCENDING_SMART',
        tagFilter: '*',
        useRepository: "https://github.com/CBIIT/bento-cds-frontend"
    )
	
    }
    options {
      ansiColor('xterm')
    }
    tools {
  	  maven 'Default' 
      jdk 'Default' 
    }
    stages {
  	  stage('checkout'){
  		steps {
  			checkout([$class: 'GitSCM', 
  				branches: [[name: "${params.LoaderTag}"]], 
  				doGenerateSubmoduleConfigurations: 
  				false, extensions: [], submoduleCfg: [], 
                recursiveSubmodules: true,
  				userRemoteConfigs: 
  				[[url: 'https://github.com/CBIIT/icdc-dataloader']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.FrontendTag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'cds-frontend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-cds-frontend']]])

			checkout([$class: 'GitSCM',
				branches: [[name: "${params.BackendTag}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'cds-backend']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/bento-cds-backend']]])
	
			dir('cds-model'){
                git branch: "${params.ModelTag}",
                url: 'https://github.com/CBIIT/cds-model'}
			
			sh 'git submodule update --init'

			checkout([$class: 'GitSCM',
				branches: [[name: "main"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [[$class: 'RelativeTargetDirectory',
				relativeTargetDir: 'cds-deployments']],
				submoduleCfg: [],
				userRemoteConfigs: 
				[[url: 'https://github.com/CBIIT/cds-deployments']]])

  		}
  }
	stage('load-opensearch-data'){
       agent {
            docker {
                image 'ncidockerhub.nci.nih.gov/icdc/opensearch-agent'
                args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }
        //--net=host
        steps {
          sh "ls -la $WORKSPACE/cds-deployments/"
          wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
 			    ansiblePlaybook(
                playbook: '${WORKSPACE}/cds-deployments/ansible/load-opensearch-microservice.yml',
            	inventory: '${WORKSPACE}/cds-deployments/ansible/hosts',
				    colorized: true,
                    extraVars: [
                                model_file_1: "cds-model.yml",
                                model_file_2: "cds-model-props.yml",
                                property_File: "props-cds.yml",
                                tier: "${params.Environment}",
                                projectName: "cds",
                                project_name: "cds",
                                indices_File: "es_indices_cds.yml",
                                page_size: "50000",
                                ansible_python_interpreter: "/usr/local/bin/python3"
                        ]
              )
          }
 		    }
    }
	
 }
  post {
    

    always {
        notify(
            secretPath: "notifications/slack",
            secretName: "cds_slack_url"
        ) 
	  cleanWs()
    }

  }
}
