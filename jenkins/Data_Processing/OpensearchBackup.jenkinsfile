@Library('datacommons-jenkins-shared-library@v1.1') _
import groovy.json.JsonOutput

def getLabelForEnvironment(environment) {
	if (environment == "stage" || environment == "prod"){
		return "slave-ncias-s2979-c"
	}else {
		return "slave-ncias-d2943-c"
	}
}


pipeline {
	agent {
		node {
			label getLabelForEnvironment(params.Environment)
		}
	}

	parameters {
    extendedChoice( 
        name: 'Environment', 
        description: 'The environment to back up from.', 
        defaultValue: 'dev', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev' )
    // string(name: 'PROJECT_NAME',
    //     description: 'Project name.',
    //     defaultValue: "cds")
    string(name: 'SNAPSHOT_NAME',
        description: 'Snapshot name used for backup/restore operation.')
    string(name: 'INDICES',
        description: 'Indices to be backed up from Opensearch. Values should comma seperated. If left blank all indices will be selected.')
    string(name: 'S3_BUCKET',
        description: 'S3 bucket which holds the snapshot.',
        defaultValue: "crdc-stage-cds-opensearch-snapshot-bucket")
    // string(name: 'BASE_PATH',
    //     description: 'A sub folder in S3 bucket where snapshots are stored.',
    //     defaultValue: "icdc")
  }

  options {
  	ansiColor('xterm')
  }

  // tools {
  // 	maven 'Default' 
  //   jdk 'Default' 
  // }

  environment {
    PROGRAM       = "crdc"
	  PROJECT       = "cds"
	  SLACK_SECRET  = "cds_slack_url"
	  ENV           = "${params.Environment}"
    SNAPSHOT_NAME = "${params.SNAPSHOT_NAME}"
    INDICES       = "${params.INDICES}"
    S3_BUCKET     = "${params.S3_BUCKET}"
    REGION        = "us-east-1"
	  DEPLOY_REPO   = "${env.PROJECT}-deployments"
  }
  stages{
      stage('checkout'){
      steps {

        checkout( poll: false, 
          changelog:false,
          scm: [$class: 'GitSCM', 
          //branches: [[name: '*/main']], 
          branches: [[name: '*/opensearch_snapshot']], 
          doGenerateSubmoduleConfigurations: false, 
          extensions: [[$class: 'DisableRemotePoll'],
          [$class: 'PathRestriction', excludedRegions: '*'], 
          [$class: 'RelativeTargetDirectory', 
          relativeTargetDir: "${env.PROJECT}-deployments"]],
          submoduleCfg: [], 
          userRemoteConfigs:
          [[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }
 
    }

    stage('Set Environment Variables'){

 		steps {

 			script {

				// set account number
				env.AWS_ACCOUNT = sh(label: 'Get account number', returnStdout: true, script: "aws sts get-caller-identity --query \"Account\" --output text").trim()

			}

 		}

  	}

  	stage('opensearch_backup'){
      // environment {
      //   TIER = "${env.ENV}"
      // }
      // agent {
      //       docker {
      //           image 'cbiitssrepo/cicd-ansible_4.0'
      //           args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
      //           reuseNode true
      //       }
      // }
 		  steps{
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/cds-deployments/ansible/dataloader/opensearchbackup.yml',
                inventory: '${WORKSPACE}/cds-deployments/ansible/hosts',
                extraVars: [
                    // tier: "${ENV}",
                    // project_name: "${PROJECT}",
                    // snapshot_repo: "${ENV}", 
                    // snapshot_value: "${params.SNAPSHOT_VALUE}",
                    // base_path: "${params.BASE_PATH}",
                    // indices: "${params.INDICES}",
                    // s3_bucket: "${params.S3_BUCKET}",
                    // project: "${PROJECT}",
                    role_arn: "arn:aws:iam::${AWS_ACCOUNT}:role/power-user-crdc-dev-cds-opensearch-snapshot"
                    ],
                  hostKeyChecking: false,
                  colorized: true,
                  extras: '-vvv') 
        }
      }
    }
  }
  post {

    cleanup {

        cleanWs()

    }

  }
}