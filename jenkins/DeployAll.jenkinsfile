@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			//label 'ctdc-docker'
			label 'slave-ncias-d2943-c'
		}
	}

	parameters {

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,dev2,qa,qa2,stage,prod')

  }

  options {

	timestamps()

  }

  environment {

      PROJECT      = 'cds'
	  //JOB_PATH     = '_default/_lower/CTDC/_jobs'
      JOB_PATH     = '_jobs'
      SLACK_SECRET = "cds_slack_url"

  }

  stages{
  	stage('checkout'){
  		steps {

        checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
            [$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/cds-deployments']]])

        }

  	}

  	stage('Deploy'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {

            script {

                def deployment = readYaml file: "${WORKSPACE}/${PROJECT}-deployments/deployments.yaml"
                def deployJobs = [:]
                deployment.services.each { service ->
                    deployJobs[service] = {
                        buildJob(
                            jobName: "${JOB_PATH}/Deploy" + "${service.key}".capitalize(),
                            parameters:[
                                string(name: 'Environment', value: params["Environment"]),
                                string(name: 'ImageTag' , value: service.value.image)
                            ]
                        )
                    }
                }
                parallel deployJobs
		    }

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}
